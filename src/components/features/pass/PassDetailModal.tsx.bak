// src/components/features/pass/PassDetailModal.tsx
import { memo, useState, useEffect, useCallback, useRef } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { X, Info, CalendarDays as CalendarIcon, Edit3, Trash2, ListChecks, History, CreditCard, Save, XCircle, Upload, Image as ImageIcon, Plus, Loader2, ZoomIn, ZoomOut } from 'lucide-react'; 
import type { PassDetails, SidebarMenuItem } from '@/types/pass';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Calendar } from '@/components/ui/calendar';
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from '@/components/ui/popover';
import { mockProducts } from '@/data/mockProducts';
import { ProductType } from '@/types/product';
import { cn } from '@/lib/utils';

// Helper function to format Date to YYYY.MM.DD.
const formatDateToInput = (date: Date | undefined | null): string => {
  if (!date) return '';
  const year = date.getFullYear();
  const month = (date.getMonth() + 1).toString().padStart(2, '0');
  const day = date.getDate().toString().padStart(2, '0');
  return `${year}.${month}.${day}.`;
};

// Helper function to parse YYYY.MM.DD. or other date strings to Date
const parseDateString = (dateString: string | undefined | null): Date | undefined => {
  if (!dateString) return undefined;
  const parts = dateString.match(/(\d{4})[./-](\d{1,2})[./-](\d{1,2})/);
  if (parts) {
    const year = parseInt(parts[1], 10);
    const month = parseInt(parts[2], 10) - 1; // Month is 0-indexed
    const day = parseInt(parts[3], 10);
    const date = new Date(year, month, day);
    if (!isNaN(date.getTime())) return date;
  }
  // Fallback for more general date strings, this might be less reliable
  const parsedDate = new Date(dateString.replace(/오전|오후|\s[AP]M/gi, '').trim());
  return isNaN(parsedDate.getTime()) ? undefined : parsedDate;
};

interface PassDetailModalProps {
  isOpen: boolean;
  onClose: () => void;
  passDetails: PassDetails | null;
  isOwner: boolean;
  onUpdatePass: (updatedDetails: PassDetails) => void;
  onDeletePass: (passId: string) => void;
}

const sidebarMenuItems: SidebarMenuItem[] = [
  { id: 'paymentInfo', label: '상품 / 결제 정보', icon: ListChecks },
  { id: 'contract', label: '계약서', icon: History },
  { id: 'suspension', label: '이용 정지', icon: CalendarIcon },
  { id: 'history', label: '수정 기록', icon: Info },
];

const InfoTooltip = ({ children }: { children: React.ReactNode }) => (
  <TooltipProvider>
    <Tooltip>
      <TooltipTrigger asChild>
        <Info className="h-4 w-4 text-blue-500 cursor-pointer ml-1" />
      </TooltipTrigger>
      <TooltipContent>
        <p>{children}</p>
      </TooltipContent>
    </Tooltip>
  </TooltipProvider>
);

export const PassDetailModal = memo<PassDetailModalProps>(
  ({ isOpen, onClose, passDetails, onUpdatePass, onDeletePass, isOwner = false }) => {
    const [activeTab, setActiveTab] = useState<string>('paymentInfo');
    const [isEditing, setIsEditing] = useState<boolean>(false);
    const [editedPassDetails, setEditedPassDetails] = useState<PassDetails | null>(null);
    const fileInputRef = useRef<HTMLInputElement>(null);
    const dropZoneRef = useRef<HTMLDivElement>(null);
    const [isUploading, setIsUploading] = useState<boolean>(false);
    const [fullscreenImage, setFullscreenImage] = useState<string | null>(null);
    const [zoomLevel, setZoomLevel] = useState<number>(1);

    useEffect(() => {
      setEditedPassDetails(passDetails);
      setIsEditing(false);
    }, [passDetails, isOpen]);
    
    const handleInputChange = useCallback((field: keyof PassDetails, value: PassDetails[keyof PassDetails]) => {
      setEditedPassDetails(prevDetails => {
        if (!prevDetails) return null;
        return { ...prevDetails, [field]: value };
      });
    }, []);
    
    // 파일 처리 공통 함수
    const processFiles = useCallback((files: FileList | File[]) => {
      if (files.length === 0) return;
      
      setIsUploading(true);
      const newImageUrls: string[] = [];
      const promises: Promise<void>[] = [];
      
      Array.from(files).forEach(file => {
        // 이미지 파일만 허용
        if (!file.type.startsWith('image/')) return;
        
        // 실제 구현에서는 서버에 업로드하고 URL을 받아와야 함
        // 여기서는 임시로 로컬 URL 생성하고 로딩 시뮬레이션
        const promise = new Promise<void>((resolve) => {
          setTimeout(() => {
            const imageUrl = URL.createObjectURL(file);
            newImageUrls.push(imageUrl);
            resolve();
          }, 500); // 업로드 시뮬레이션을 위한 지연
        });
        
        promises.push(promise);
      });
      
      Promise.all(promises).then(() => {
        if (editedPassDetails) {
          // 기존 이미지와 새 이미지 합치기
          const currentImages = editedPassDetails.contractImages || [];
          handleInputChange('contractImages', [...currentImages, ...newImageUrls]);
        }
        
        setIsUploading(false);
      });
      
      // 파일 입력 초기화 (동일한 파일을 다시 선택할 수 있도록)
      if (fileInputRef.current) {
        fileInputRef.current.value = '';
      }
    }, [editedPassDetails, handleInputChange]);
    
    // 파일 선택 이벤트 핸들러
    const handleFileUpload = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {
      const files = event.target.files;
      if (!files || files.length === 0) return;
      processFiles(files);
    }, [processFiles]);
    
    // 드래그 앤 드롭 이벤트 핸들러
    const handleDragOver = useCallback((event: React.DragEvent<HTMLDivElement>) => {
      event.preventDefault();
      event.stopPropagation();
      if (dropZoneRef.current) {
        dropZoneRef.current.classList.add('border-blue-500');
        dropZoneRef.current.classList.add('bg-blue-50');
      }
    }, []);
    
    const handleDragLeave = useCallback((event: React.DragEvent<HTMLDivElement>) => {
      event.preventDefault();
      event.stopPropagation();
      if (dropZoneRef.current) {
        dropZoneRef.current.classList.remove('border-blue-500');
        dropZoneRef.current.classList.remove('bg-blue-50');
      }
    }, []);
    
    const handleDrop = useCallback((event: React.DragEvent<HTMLDivElement>) => {
      event.preventDefault();
      event.stopPropagation();
      
      if (dropZoneRef.current) {
        dropZoneRef.current.classList.remove('border-blue-500');
        dropZoneRef.current.classList.remove('bg-blue-50');
      }
      
      const files = event.dataTransfer.files;
      if (files && files.length > 0) {
        processFiles(files);
      }
    }, [processFiles]);

    const handleRemoveImage = useCallback((index: number) => {
      if (!editedPassDetails?.contractImages) return;
      
      const updatedImages = [...editedPassDetails.contractImages];
      updatedImages.splice(index, 1);
      handleInputChange('contractImages', updatedImages);
    }, [editedPassDetails, handleInputChange]);

    const handleEditToggle = () => {
      if (!isEditing && passDetails) {
        setEditedPassDetails(JSON.parse(JSON.stringify(passDetails)));
      }
      setIsEditing(!isEditing);
    };

    const handleCancelEdit = () => {
      if (passDetails) {
        setEditedPassDetails(JSON.parse(JSON.stringify(passDetails)));
      }
      setIsEditing(false);
    };

    const handleSave = () => {
      if (editedPassDetails) {
        onUpdatePass(editedPassDetails);
        setIsEditing(false);
      }
    };

    const handleDelete = () => {
      if (passDetails?.id) {
        onDeletePass(passDetails.id);
        onClose();
      }
    };
    
    // 이미지 전체 화면 관련 함수
    const openFullscreenImage = useCallback((imageUrl: string) => {
      setFullscreenImage(imageUrl);
      setZoomLevel(1); // 확대/축소 레벨 초기화
    }, []);
    
    const closeFullscreenImage = useCallback(() => {
      setFullscreenImage(null);
      setZoomLevel(1);
    }, []);
    
    const handleZoomIn = useCallback(() => {
      setZoomLevel(prev => Math.min(prev + 0.25, 3));
    }, []);
    
    const handleZoomOut = useCallback(() => {
      setZoomLevel(prev => Math.max(prev - 0.25, 0.5));
    }, []);

    if (!passDetails && !isOpen) return null;
    if (!passDetails && isOpen) {
      return (
        <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>
          <DialogContent className="sm:max-w-[800px] max-h-[750px] flex flex-col p-0">
            <DialogHeader className="p-6 border-b">
              <DialogTitle>이용권 정보 없음</DialogTitle>
            </DialogHeader>
            <div className="flex-grow p-6">이용권 정보를 불러올 수 없습니다.</div>
            <DialogFooter className="p-6 border-t">
              <Button variant="outline" onClick={onClose}>닫기</Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      );
    }
    if (!passDetails) return null;

    const currentDisplayDetails = isEditing ? editedPassDetails : passDetails;

    // 탭 콘텐츠 렌더링
  
    const renderTabContent = () => {
      switch (activeTab) {
        case 'contract':
          return (
            <div className="space-y-6">
              <div>
                <h4 className="text-sm font-semibold mb-2 flex items-center">
                  계약서 정보
                  <InfoTooltip>상품 담당자가 첨부한 계약서 사진을 확인합니다.</InfoTooltip>
                </h4>
                
                {isEditing ? (
                  <div className="space-y-4">
                    <div 
                      ref={dropZoneRef}
                      className="bg-gray-50 p-4 rounded-md border-2 border-dashed border-gray-300 transition-colors duration-200"
                      onDragOver={handleDragOver}
                      onDragLeave={handleDragLeave}
                      onDrop={handleDrop}
                    >
                      <div className="flex flex-col gap-4">
                        {/* 계약서 이미지 목록 */}
                        {editedPassDetails?.contractImages && editedPassDetails.contractImages.length > 0 ? (
                          <div className="grid grid-cols-2 gap-4">
                            {editedPassDetails.contractImages.map((image, index) => (
                              <div key={index} className="relative group">
                                <img 
                                  src={image} 
                                  alt={`계약서 ${index + 1}`} 
                                  className="w-full h-48 object-cover rounded-md border border-gray-200 cursor-pointer" 
                                  onClick={() => openFullscreenImage(image)}
                                />
                                <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-10 transition-all duration-200 flex items-center justify-center opacity-0 group-hover:opacity-100">
                                  <ZoomIn className="text-white drop-shadow-lg h-6 w-6" />
                                </div>
                                <button
                                  type="button"
                                  onClick={() => handleRemoveImage(index)}
                                  className="absolute top-2 right-2 bg-red-500 text-white p-1 rounded-full opacity-0 group-hover:opacity-100 transition-opacity"
                                >
                                  <X className="h-4 w-4" />
                                </button>
                              </div>
                            ))}
                          </div>
                        ) : (
                          <div className="text-center py-8">
                            <ImageIcon className="mx-auto h-12 w-12 text-gray-400" />
                            <p className="mt-2 text-sm text-gray-500">첨부된 계약서 이미지가 없습니다</p>
                            <p className="text-xs text-gray-400 mt-1">이미지를 드래그하여 이곳에 놓거나 아래 버튼을 클릭하세요</p>
                          </div>
                        )}
                        
                        {/* 업로드 중 표시 */}
                        {isUploading && (
                          <div className="flex items-center justify-center py-4">
                            <Loader2 className="h-6 w-6 text-blue-500 animate-spin mr-2" />
                            <span className="text-sm text-blue-500">이미지 업로드 중...</span>
                          </div>
                        )}
                        
                        {/* 이미지 업로드 버튼 */}
                        <div className="mt-4">
                          <input
                            type="file"
                            ref={fileInputRef}
                            onChange={handleFileUpload}
                            accept="image/*"
                            multiple
                            className="hidden"
                          />
                          <Button 
                            type="button" 
                            variant="outline" 
                            className="w-full" 
                            onClick={() => fileInputRef.current?.click()}
                            disabled={isUploading}
                          >
                            <Upload className="mr-2 h-4 w-4" />
                            계약서 이미지 업로드
                          </Button>
                        </div>
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className="bg-gray-50 p-4 rounded-md">
                    {currentDisplayDetails?.contractImages && currentDisplayDetails.contractImages.length > 0 ? (
                      <div className="grid grid-cols-2 gap-4">
                        {currentDisplayDetails.contractImages.map((image, index) => (
                          <div key={index} className="relative group">
                            <img 
                              src={image} 
                              alt={`계약서 ${index + 1}`} 
                              className="w-full h-48 object-cover rounded-md border border-gray-200 cursor-pointer" 
                              onClick={() => openFullscreenImage(image)}
                            />
                            <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-10 transition-all duration-200 flex items-center justify-center opacity-0 group-hover:opacity-100">
                              <ZoomIn className="text-white drop-shadow-lg h-6 w-6" />
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div className="text-center py-12">
                        <ImageIcon className="mx-auto h-12 w-12 text-gray-400" />
                        <p className="mt-2 text-sm text-gray-500">등록된 계약서 이미지가 없습니다</p>
                        {isOwner && (
                          <Button 
                            variant="outline" 
                            className="mt-4" 
                            onClick={handleEditToggle}
                          >
                            <Plus className="mr-2 h-4 w-4" />
                            계약서 이미지 등록하기
                          </Button>
                        )}
                      </div>
                    )}
                  </div>
                )}
              </div>
            </div>
          );
          
        case 'paymentInfo':
          return (
            <div className="space-y-6">
              <div>
                <h4 className="text-sm font-semibold mb-2 flex items-center">
                  상품 정보
                  <InfoTooltip>서비스 시작일, 만료일, 담당자 정보를 확인합니다.</InfoTooltip>
                </h4>
                <div className="bg-gray-50 p-4 rounded-md space-y-3 text-sm">
                  {/* 상품명 추가 */}
                  <div className="flex justify-between font-medium">
                    <span>상품명</span>
                    <span>
                      {(() => {
                        // 상품 ID가 있으면 해당 상품 이름 찾기
                        if (currentDisplayDetails?.productId) {
                          // 상품 타입에 따라 ProductType 결정
                          let productType: ProductType;
                          switch (currentDisplayDetails.subCategory) {
                            case 'PT':
                              productType = ProductType.PT;
                              break;
                            case '헬스':
                              productType = ProductType.MEMBERSHIP;
                              break;
                            case '락커':
                              productType = ProductType.LOCKER;
                              break;
                            default:
                              productType = ProductType.OTHER;
                          }
                          
                          const product = mockProducts.find(p => 
                            p.id === currentDisplayDetails.productId && 
                            p.type === productType
                          );
                          if (product) return product.name;
                        }
                        return currentDisplayDetails?.name || '-';
                      })()} 
                    </span>
                  </div>
                  {isEditing ? (
                    <>
                      <div className="space-y-1">
                        <Label htmlFor="serviceStartDate">서비스 시작일</Label>
                        <Popover>
                          <PopoverTrigger asChild>
                            <Button
                              variant={"outline"}
                              className={`w-full justify-start text-left font-normal ${!editedPassDetails?.serviceStartDate && "text-muted-foreground"}`}
                            >
                              <CalendarIcon className="mr-2 h-4 w-4" />
                              {editedPassDetails?.serviceStartDate ? formatDateToInput(parseDateString(editedPassDetails.serviceStartDate)) : <span>날짜 선택</span>}
                            </Button>
                          </PopoverTrigger>
                          <PopoverContent className="w-auto p-0" align="start">
                            <Calendar
                              mode="single"
                              selected={parseDateString(editedPassDetails?.serviceStartDate)}
                              onSelect={(date) => handleInputChange('serviceStartDate', date ? formatDateToInput(date) : '')}
                              initialFocus
                            />
                          </PopoverContent>
                        </Popover>
                      </div>
                      <div className="space-y-1">
                        <Label htmlFor="serviceEndDate">서비스 만료일</Label>
                        <Popover>
                          <PopoverTrigger asChild>
                            <Button
                              variant={"outline"}
                              className={`w-full justify-start text-left font-normal ${!editedPassDetails?.serviceEndDate && "text-muted-foreground"}`}
                            >
                              <CalendarIcon className="mr-2 h-4 w-4" />
                              {editedPassDetails?.serviceEndDate ? formatDateToInput(parseDateString(editedPassDetails.serviceEndDate)) : <span>날짜 선택</span>}
                            </Button>
                          </PopoverTrigger>
                          <PopoverContent className="w-auto p-0" align="start">
                            <Calendar
                              mode="single"
                              selected={parseDateString(editedPassDetails?.serviceEndDate)}
                              onSelect={(date) => handleInputChange('serviceEndDate', date ? formatDateToInput(date) : '')}
                              initialFocus
                            />
                          </PopoverContent>
                        </Popover>
                      </div>
                    </>
                  ) : (
                    <>
                      <div className="flex justify-between">
                        <span>서비스 시작일</span>
                        <span>{passDetails?.serviceStartDate}</span>
                      </div>
                      <div className="flex justify-between">
                        <span>서비스 만료일</span>
                        <span>{passDetails?.serviceEndDate}</span>
                      </div>
                    </>
                  )}
                </div>
                <div className="bg-gray-50 p-4 rounded-md space-y-3 text-sm mt-3">
                  {isEditing ? (
                    <>
                      <div>
                        <Label htmlFor="consultant">상품 상담자</Label>
                        <Input id="consultant" value={editedPassDetails?.consultant || ''} onChange={(e) => handleInputChange('consultant', e.target.value)} />
                      </div>
                      <div>
                        <Label htmlFor="instructor">담당 강사</Label>
                        <Input id="instructor" value={editedPassDetails?.instructor || ''} onChange={(e) => handleInputChange('instructor', e.target.value)} />
                      </div>
                    </>
                  ) : (
                    <>
                      <div className="flex justify-between">
                        <span>상품 상담자</span>
                        <span>{passDetails?.consultant || '-'}</span>
                      </div>
                      <div className="flex justify-between">
                        <span>담당 강사</span>
                        <span>{passDetails?.instructor || '배정 예정'}</span>
                      </div>
                    </>
                  )}
                </div>
              </div>

              <div>
                <h4 className="text-sm font-semibold mb-2 flex items-center">
                  결제 정보
                  <InfoTooltip>결제 일시, 수단, 금액, 구매 목적 등을 확인하거나 수정합니다.</InfoTooltip>
                </h4>
                {isEditing ? (
                  <>
                    <div className="bg-gray-50 p-4 rounded-md space-y-3 text-sm mb-3">
                      <p className="text-xs font-semibold text-gray-500 mb-2">결제 기본 정보</p>
                      <div className="space-y-1">
                        <Label htmlFor="paymentDate">결제 일시</Label>
                        <Popover>
                          <PopoverTrigger asChild>
                            <Button
                              variant={"outline"}
                              className={`w-full justify-start text-left font-normal ${!editedPassDetails?.paymentDate && "text-muted-foreground"}`}
                            >
                              <CalendarIcon className="mr-2 h-4 w-4" />
                              {editedPassDetails?.paymentDate ? formatDateToInput(parseDateString(editedPassDetails.paymentDate)) : <span>날짜 선택</span>}
                            </Button>
                          </PopoverTrigger>
                          <PopoverContent className="w-auto p-0" align="start">
                            <Calendar
                              mode="single"
                              selected={parseDateString(editedPassDetails?.paymentDate)}
                              onSelect={(date) => handleInputChange('paymentDate', date ? formatDateToInput(date) : '')}
                              initialFocus
                            />
                          </PopoverContent>
                        </Popover>
                      </div>
                      <div>
                        <Label htmlFor="paymentMethod">결제 수단</Label>
                        <Input id="paymentMethod" value={editedPassDetails?.paymentMethod || ''} onChange={(e) => handleInputChange('paymentMethod', e.target.value)} />
                      </div>
                      <div>
                        <Label htmlFor="purchasePurpose">구매 목적</Label>
                        <Input id="purchasePurpose" value={editedPassDetails?.purchasePurpose || ''} onChange={(e) => handleInputChange('purchasePurpose', e.target.value)} />
                      </div>
                    </div>
                    <div className="bg-gray-50 p-4 rounded-md space-y-3 text-sm">
                      <p className="text-xs font-semibold text-gray-500 mb-2">금액 정보</p>
                      <div>
                        <Label htmlFor="productAmountInPaymentSection">상품 금액</Label>
                        <Input id="productAmountInPaymentSection" type="number" value={editedPassDetails?.productAmount || ''} onChange={(e) => handleInputChange('productAmount', e.target.valueAsNumber)} />
                      </div>
                      <div>
                        <Label htmlFor="actualPaymentAmount">실제 결제 금액</Label>
                        <Input id="actualPaymentAmount" type="number" value={editedPassDetails?.actualPaymentAmount || ''} onChange={(e) => handleInputChange('actualPaymentAmount', e.target.valueAsNumber)} />
                      </div>
                      <div>
                        <Label htmlFor="consultantSalesShare">상품 담당자 매출 실적</Label>
                        <Input id="consultantSalesShare" type="number" value={editedPassDetails?.consultantSalesShare || ''} onChange={(e) => handleInputChange('consultantSalesShare', e.target.valueAsNumber)} />
                      </div>
                      <div>
                        <Label htmlFor="unpaidAmount">미수금</Label>
                        <Input id="unpaidAmount" type="number" value={editedPassDetails?.unpaidAmount || ''} onChange={(e) => handleInputChange('unpaidAmount', e.target.valueAsNumber)} />
                      </div>
                      <div>
                        <Label htmlFor="revenueDistributionNotes">실적 배분 메모</Label>
                        <Input id="revenueDistributionNotes" value={editedPassDetails?.revenueDistributionNotes || ''} onChange={(e) => handleInputChange('revenueDistributionNotes', e.target.value)} />
                      </div>
                    </div>
                  </>
                ) : (
                  <>
                    <div className="bg-gray-50 p-4 rounded-md space-y-2 text-sm mb-3">
                      <p className="text-xs font-semibold text-gray-500 mb-2">결제 기본 정보</p>
                      <div className="flex justify-between">
                        <span>결제 일시</span>
                        <span>{currentDisplayDetails?.paymentDate || '-'}</span>
                      </div>
                      <div className="flex justify-between">
                        <span>결제 수단</span>
                        <span>{currentDisplayDetails?.paymentMethod || '-'}</span>
                      </div>
                      <div className="flex justify-between">
                        <span>구매 목적</span>
                        <span>{currentDisplayDetails?.purchasePurpose || '-'}</span>
                      </div>
                    </div>
                    <div className="bg-gray-50 p-4 rounded-md space-y-2 text-sm">
                      <p className="text-xs font-semibold text-gray-500 mb-2">금액 정보</p>
                      <div className="flex justify-between">
                        <span>상품 금액</span>
                        <span>{currentDisplayDetails?.productAmount ? `${Number(currentDisplayDetails.productAmount).toLocaleString()}원` : '-'}</span>
                      </div>
                      <div className="flex justify-between">
                        <span>실제 결제 금액</span>
                        <span>{currentDisplayDetails?.actualPaymentAmount ? `${Number(currentDisplayDetails.actualPaymentAmount).toLocaleString()}원` : '-'}</span>
                      </div>
                      <div className="flex justify-between">
                        <span>상품 담당자 매출 실적</span>
                        <span>{currentDisplayDetails?.consultantSalesShare ? `${Number(currentDisplayDetails.consultantSalesShare).toLocaleString()}원` : '-'}</span>
                      </div>
                      <div className="flex justify-between">
                        <span>미수금</span>
                        <span>{currentDisplayDetails?.unpaidAmount ? `${Number(currentDisplayDetails.unpaidAmount).toLocaleString()}원` : '-'}</span>
                      </div>
                      <div className="flex justify-between">
                        <span>실적 배분 메모</span>
                        <span>{currentDisplayDetails?.revenueDistributionNotes || '-'}</span>
                      </div>
                    </div>
                  </>
                )}
              </div>
            </div>
          );
        default:

return (
  <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>
    {fullscreenImage && <FullscreenImageModal />}
    <DialogContent className="max-w-5xl p-0" aria-describedby={undefined}>
      <div className="flex h-[800px]">
        {/* Sidebar */}
        <div className="w-1/4 bg-gray-50 p-6 border-r border-gray-200 flex flex-col">
          <div className="mb-6">
            <h3 className="text-lg font-semibold">{passDetails?.name}</h3>
            <p className="text-xs text-gray-500">
              {passDetails?.type} · {passDetails?.category} · {passDetails?.subCategory}
            </p>
          </div>
          <nav className="space-y-1">
            {sidebarMenuItems.map((item) => (
              <button
                key={item.id}
                onClick={() => setActiveTab(item.id)}
                className={`w-full flex items-center space-x-3 px-3 py-2.5 rounded-md text-sm font-medium 
                  ${
                    activeTab === item.id
                      ? 'bg-blue-600 text-white' // Primary color (#2563eb or similar)
                      : 'text-gray-700 hover:bg-gray-200'
                  }
                `}
              >
                <item.icon className={`h-5 w-5 ${
                  activeTab === item.id ? 'text-white' : 'text-gray-500'
                }`} />
                <span>{item.label}</span>
              </button>
            ))}
          </nav>
        </div>
                      }
                    `}
                  >
                    <item.icon className={`h-5 w-5 ${
                      activeTab === item.id ? 'text-white' : 'text-gray-500'
                    }`} />
                    <span>{item.label}</span>
                  </button>
                ))}
              </nav>
            </div>

            {/* Main Content */}
            <div className="w-3/4 p-8 flex flex-col">
              <DialogHeader className="flex flex-row justify-between items-center mb-6 pb-4 border-b">
                <DialogTitle className="text-xl font-bold">
                  {/* 탭 메뉴에 따라 제목 표시 */}
                  {sidebarMenuItems.find(item => item.id === activeTab)?.label}
                </DialogTitle>
              </DialogHeader>

              <div className="flex-grow overflow-y-auto pr-2 scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-gray-100 mb-6">
                {renderTabContent()}
              </div>

              {isOwner && (
                <DialogFooter className="gap-2 mt-auto pt-6 border-t">
                  {isEditing ? (
                    <>
                      <Button variant="outline" onClick={handleCancelEdit}><XCircle className="mr-2 h-4 w-4" /> 취소</Button>
                      <Button onClick={handleSave} className="bg-gym-primary hover:bg-gym-primary/90 text-white"><Save className="mr-2 h-4 w-4" /> 저장</Button>
                    </>
                  ) : (
                    <>
                      <Button variant="outline" onClick={handleDelete} className="flex items-center">
                        <Trash2 className="mr-2 h-4 w-4" /> 삭제
                      </Button>
                      <Button onClick={handleEditToggle} className="bg-gym-primary hover:bg-gym-primary/90 text-white"><Edit3 className="mr-2 h-4 w-4" /> 수정</Button>
                    </>
                  )}
                </DialogFooter>
              )}
            </div>
          </div>
        </DialogContent>
      </Dialog>
    );
});

PassDetailModal.displayName = 'PassDetailModal';
